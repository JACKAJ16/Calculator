{"version":3,"sources":["components/Button/index.tsx","components/Input/index.tsx","components/Calculator/index.tsx","App.tsx","index.tsx"],"names":["Button","value","className","onClick","Input","input","result","Calculator","useState","accumulator","setAccumulator","currentValue","setCurrentValue","setResult","resultTrigger","setResultTrigger","operators","evaluate","output","calculate","a","operator","b","functions","add","sub","div","mlt","order","newInput","replace","i","n","length","re","RegExp","join","lastIndex","test","Number","$1","$2","$3","isNaN","isFinite","String","slice","percentage","match","toString","map","item","e","indexOf","find","res","undefined","Infinity","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fa49fd4.chunk.js","sourcesContent":["import React from 'react';\r\n// style\r\nimport './style.scss';\r\n\r\ninterface ButtonProps {\r\n  value?: string;\r\n  className: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ value, className, onClick }: ButtonProps) => {\r\n  return (\r\n    <div className={`button ${className}`} onClick={onClick}>\r\n      {value}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n// style\r\nimport './style.scss';\r\n\r\ninterface InputProps {\r\n  input: string;\r\n  result: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ input, result }: InputProps) => (\r\n  <div className=\"input\">\r\n    <div className=\"input__inner\">\r\n      <div className=\"input__value\">{input}</div>\r\n      <div className=\"input__result\">{result}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Input;\r\n","import React, { useState } from 'react';\r\n// components\r\nimport Button from '../Button';\r\nimport Input from '../Input';\r\n// style\r\nimport './style.scss';\r\n\r\nconst Calculator: React.FC = () => {\r\n  const [accumulator, setAccumulator] = useState<string>('');\r\n  const [currentValue, setCurrentValue] = useState<string>('');\r\n  const [result, setResult] = useState<string>('');\r\n\r\n  // Trigger if '=' sign has been clicked\r\n  const [resultTrigger, setResultTrigger] = useState<boolean>(false);\r\n\r\n  // Arrays of numbers and operators for mapping\r\n  const numbers = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '.', '0'];\r\n  const operators = ['/', '*', '-', '+'];\r\n\r\n  // Evaluation function\r\n  const evaluate = (input: string) => {\r\n    const calculate = (a: number, operator: string, b: number): number => {\r\n      switch (operator) {\r\n        case functions.add:\r\n          return a + b;\r\n        case functions.sub:\r\n          return a - b;\r\n        case functions.div:\r\n          return a / b;\r\n        case functions.mlt:\r\n          return a * b;\r\n        default:\r\n          return 0;\r\n      }\r\n    };\r\n\r\n    const functions = {\r\n      add: '+',\r\n      sub: '-',\r\n      div: '/',\r\n      mlt: '*',\r\n    };\r\n\r\n    // Create array for order of operations\r\n    const order = [\r\n      [[functions.mlt], [functions.div]],\r\n      [[functions.add], [functions.sub]],\r\n    ];\r\n\r\n    let newInput = input.replace(/[^0-9%^*\\/()\\-+.]/g, ''); // clean up unnecessary characters\r\n\r\n    let output;\r\n\r\n    for (let i = 0, n = order.length; i < n; i++) {\r\n      // Regular Expression to look for operators between floating numbers or integers\r\n      const re = new RegExp('(\\\\d+\\\\.?\\\\d*)([\\\\' + order[i].join('\\\\') + '])(\\\\d+\\\\.?\\\\d*)');\r\n      re.lastIndex = 0; // take precautions and reset re starting pos\r\n\r\n      // Loop while there is still calculation for level of precedence\r\n      while (re.test(newInput)) {\r\n        output = calculate(Number(RegExp.$1), RegExp.$2, Number(RegExp.$3));\r\n        if (isNaN(output) || !isFinite(output)) return output; // exit early if not a number\r\n        newInput = newInput.replace(re, String(output));\r\n      }\r\n    }\r\n\r\n    return output;\r\n  };\r\n\r\n  // Handle numbers input\r\n  const handleChange = (e: string) => {\r\n    if (e === '.') {\r\n      currentValue.slice(-1) === '.' || currentValue.indexOf('.') !== -1\r\n        ? null\r\n        : currentValue.length === 0\r\n        ? setCurrentValue('0' + e)\r\n        : currentValue.length > 0 && setCurrentValue(currentValue + e);\r\n    } else if (e === '0') {\r\n      currentValue !== '0' && setCurrentValue(currentValue + e);\r\n    } else if (result.length > 0) {\r\n      setCurrentValue(e);\r\n      setAccumulator('');\r\n      setResult('');\r\n    } else if (resultTrigger) {\r\n      setCurrentValue(e);\r\n      setAccumulator('');\r\n      setResultTrigger(false);\r\n    } else {\r\n      currentValue.length <= 16 && setCurrentValue(currentValue + e);\r\n    }\r\n  };\r\n\r\n  // Handle operators\r\n  const handleOperator = (operator: string) => {\r\n    if (\r\n      currentValue.length === 0 &&\r\n      (operators.find((item) => item === accumulator.slice(-1)) || accumulator.slice(-1) === '.')\r\n    ) {\r\n      setAccumulator(accumulator.slice(0, -1) + operator);\r\n      setCurrentValue('');\r\n    } else if (accumulator.length === 0) {\r\n      setAccumulator(currentValue + operator);\r\n      setCurrentValue('');\r\n    } else if (accumulator.length > 0) {\r\n      resultTrigger && setResultTrigger(false);\r\n      setAccumulator(accumulator + currentValue + operator);\r\n      setCurrentValue('');\r\n      result.length > 0 && setAccumulator(result + operator);\r\n    }\r\n    setResult('');\r\n  };\r\n\r\n  // Calculate percentage\r\n  const handlePercentage = () => {\r\n    // test if there is more than 1 operator to handle accumulator for evaluate function or just remove one operator\r\n    const testOperatorsCount = accumulator.slice(0, accumulator.length - 1).match(/[*/+-]/)?.length;\r\n    const percentage = testOperatorsCount\r\n      ? ((Number(evaluate(accumulator.slice(0, accumulator.length - 1))) / 100) * Number(currentValue)).toString()\r\n      : ((Number(accumulator.slice(0, accumulator.length - 1)) / 100) * Number(currentValue)).toString();\r\n    accumulator.length > 0 && currentValue.length > 0 && setCurrentValue(percentage);\r\n  };\r\n\r\n  // Handle all clear click\r\n  const handleClear = () => {\r\n    setAccumulator('');\r\n    setCurrentValue('');\r\n    setResult('');\r\n  };\r\n\r\n  // Handle one symbol delete\r\n  const handleDelete = () => {\r\n    if (result.length > 0) {\r\n      setAccumulator(result);\r\n      setCurrentValue('');\r\n      setResult('');\r\n      setResultTrigger(true);\r\n    } else {\r\n      const input = accumulator + currentValue;\r\n      input.length > 0 && setAccumulator(input.slice(0, input.length - 1));\r\n      setCurrentValue('');\r\n    }\r\n  };\r\n\r\n  // Handle result click\r\n  const handleResult = () => {\r\n    if (result.length > 0) {\r\n      setCurrentValue('');\r\n      setAccumulator(result);\r\n      setResult('');\r\n      setResultTrigger(true);\r\n    } else if (accumulator.length === 0) {\r\n      setResult(currentValue);\r\n    } else {\r\n      const res =\r\n        evaluate(accumulator + currentValue) === undefined ||\r\n        evaluate(accumulator + currentValue) === Infinity ||\r\n        (operators.find((item) => item === accumulator.slice(-1)) && currentValue.length === 0)\r\n          ? 'Error'\r\n          : String(evaluate(accumulator + currentValue));\r\n      setResult(res);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Input input={accumulator + currentValue} result={result} />\r\n      <div className=\"buttons\">\r\n        <Button className=\"clear\" value={'AC'} onClick={handleClear} />\r\n        <Button className=\"delete\" onClick={handleDelete} />\r\n        <Button className=\"percent\" value={'%'} onClick={handlePercentage} />\r\n        {numbers.map((item) => (\r\n          <Button\r\n            className={item !== '.' ? `num-${item}` : 'dot'}\r\n            key={item}\r\n            value={item}\r\n            onClick={() => handleChange(item)}\r\n          />\r\n        ))}\r\n        {operators.map((item) => (\r\n          <Button className=\"operator\" key={item} value={item} onClick={() => handleOperator(item)} />\r\n        ))}\r\n        <Button className={'result'} key={'='} value={'='} onClick={handleResult} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\n// components\r\nimport Calculator from './components/Calculator';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}